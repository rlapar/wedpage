{"version":3,"sources":["components/navigation/Navlinks.js","assets/images/wedding-rings-logo-white.svg","assets/images/menu_arrow.svg","components/navigation/DesktopNavbar.js","components/navigation/MobileNavbar.js","components/navigation/Navbar.js","pages/index.js","pages/journey.js","pages/place.js","pages/program.js","pages/info.js","App.js","serviceWorker.js","index.js","theme.js"],"names":["NavLinks","props","tempTabIndex","isMobileLink","className","to","process","BASE_URL","tabIndex","MyDesktopNavbar","styled","nav","theme","primaryDark","secondary","primaryLight","MyMobileNavButton","button","displayMobileNavbar","DesktopNavbar","exact","src","logo","alt","onClick","toggleMobileNavbar","navIcon","MyMobileNavbar","MobileNavbar","MyNavbar","div","Navbar","state","setState","prevState","checkAndAutoHideMobileNavbar","screeWidth","window","innerWidth","addEventListener","this","removeEventListener","Component","Index","style","display","justifyContent","alignItems","height","Journey","Place","Program","Info","App","path","component","Home","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d83776e.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst NavLinks = props => {\n    let tempTabIndex\n    if (props.isMobileLink) {\n        tempTabIndex = \"-1\"\n    }\n    return (\n        <ul className=\"nav-links\">\n            <li>\n                <Link to={process.env.BASE_URL + '/journey'} className=\"link\" tabIndex={ tempTabIndex }>Naše cesta</Link>\n            </li>\n            <li>\n                <Link to={process.env.BASE_URL + '/place'} className=\"link\" tabIndex={ tempTabIndex }>Místo</Link>\n            </li>\n            <li>\n                <Link to={process.env.BASE_URL + '/program'} className=\"link\" tabIndex={ tempTabIndex }>Program</Link>\n            </li>\n            <li>\n                <Link to={process.env.BASE_URL + '/info'} className=\"link\" tabIndex={ tempTabIndex }>Důležité informace</Link>\n            </li>\n        </ul>\n    )\n}\n\nexport default NavLinks;","export default __webpack_public_path__ + \"static/media/wedding-rings-logo-white.a72d049c.svg\";","export default __webpack_public_path__ + \"static/media/menu_arrow.3cbc0782.svg\";","import React, {Component} from \"react\";\nimport styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\nimport NavLinks from \"./Navlinks\";\nimport logo from \"../../assets/images/wedding-rings-logo-white.svg\";\nimport navIcon from \"../../assets/images/menu_arrow.svg\"\n\nconst MyDesktopNavbar = styled.nav`\n  display:flex;\n  flex-flow: row nowrap;\n  justify-content: space-evenly;\n  align-items: center;\n  \n  background: ${ props => props.theme.primaryDark};\n  color: ${ props => props.theme.secondary};\n  \n  height: 10vh;\n  \n  box-shadow: 0 10px 5px ${ props => props.theme.primaryLight};\n  \n  .logo {\n    display: flex;\n    justify-content: start;\n    align-items: start;\n    height: 80%;\n    width: 80%;\n\n    &:hover {\n      height: 90%;\n      width: 90%;\n    }\n  }\n  \n  .nav-links {\n    display: flex;\n    flex-flow: row nowrap;\n    justify-content: space-evenly;\n    align-items: center;\n    \n    width: 35vw;\n    list-style: none;\n\n    @media screen and (max-width: 768px) {\n      display: none;\n    }\n  }  \n  \n  .link {\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: space-evenly;\n    align-items: center;\n\n    height: 10vh;\n    \n    padding: 0 1rem;\n    color:${ props => props.theme.secondary};\n    font-size: 2.5vh;\n    text-decoration: none;\n    border-radius: 10px;\n    \n    &:focus {\n      background: rgba(0,0,0,0.2);\n      outline: none;\n    }\n    \n    &:hover {\n      font-size: 3.5vh;\n    }\n  }\n`\n\nconst MyMobileNavButton = styled.button`\n  background: transparent;\n  height: 8vh;\n  width: 8vh;\n  border: none;\n  display: none;\n  \n  transition: transform 1s ease-in-out;\n  transform: rotate(${props => props.displayMobileNavbar  ? (\"180deg\") : (\"0deg\")}  );\n  \n  &:focus {\n    outline: none;\n  }\n  \n  @media screen and (max-width: 768px) {\n    display: block;\n  }\n`\n\nconst DesktopNavbar = props => {\n    return (\n        <MyDesktopNavbar>\n            <Link exact to={process.env.BASE_URL + '/'} className=\"link\">\n                <img className=\"logo\" src={logo} alt=\"logo\"/>\n            </Link>\n\n            <NavLinks />\n            <MyMobileNavButton\n                displayMobileNavbar = {props.displayMobileNavbar}\n                onClick = {props.toggleMobileNavbar}\n            >\n                <img src={navIcon}/>\n            </MyMobileNavButton>\n\n        </MyDesktopNavbar>\n    )\n}\n\nexport default DesktopNavbar","import React, {Component} from \"react\";\nimport styled from \"styled-components\";\nimport NavLinks from \"./Navlinks\";\n\nconst MyMobileNavbar = styled.nav`\n  background: ${ props => props.theme.primaryDark};\n  \n  margin-bottom: 15px;\n\n  color: ${ props => props.theme.secondary};\n  align-self: flex-end;\n  \n  transition: transform 1s;\n  transform: translateX( ${props => props.displayMobileNavbar ? \"0%\" : \"calc(100% + 15px)\"});\n  width: 50vw;\n  box-shadow: -10px 10px 5px ${ props => props.theme.primaryLight};\n  z-index: 2;\n\n  .nav-links {\n    display: flex;\n    flex-flow: column nowrap;\n    justify-content: space-evenly;\n    align-items: center;\n\n    height: 60vh;\n    list-style: none;\n  }\n\n  .link {    \n    color:${ props => props.theme.secondary};\n    font-size: 2.5vh;\n    text-decoration: none;\n  }\n`\n\nconst MobileNavbar = props => {\n    return (\n        <MyMobileNavbar displayMobileNavbar = {props.displayMobileNavbar}>\n            <NavLinks isMobileLink = {true}/>\n        </MyMobileNavbar>\n    )\n}\n\nexport default MobileNavbar","import React, {Component} from \"react\";\nimport DesktopNavbar from \"./DesktopNavbar\";\nimport MobileNavbar from \"./MobileNavbar\";\nimport styled from \"styled-components\";\n\nconst MyNavbar = styled.div`\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: flex-start;\n  \n  overflow-x: hidden;\n`\n\nclass Navbar extends Component {\n\n    state = {\n        displayMobileNavbar: false\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.checkAndAutoHideMobileNavbar)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.checkAndAutoHideMobileNavbar)\n    }\n\n    toggleMobileNavbar = () => {\n        this.setState( prevState => {\n            return { displayMobileNavbar: !prevState.displayMobileNavbar}\n        })\n    }\n\n    checkAndAutoHideMobileNavbar = () => {\n        const screeWidth = window.innerWidth\n        if (this.state.displayMobileNavbar && screeWidth > 768) {\n            this.setState({\n                displayMobileNavbar: false\n            })\n        }\n    }\n\n    render() {\n        return (\n            <MyNavbar>\n                <DesktopNavbar\n                    toggleMobileNavbar = {this.toggleMobileNavbar}\n                    displayMobileNavbar = {this.state.displayMobileNavbar}\n                />\n                <MobileNavbar displayMobileNavbar = {this.state.displayMobileNavbar}/>\n            </MyNavbar>\n        )\n    }\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Index = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90vh'\n            }}\n        >\n            <h1>Index</h1>\n        </div>\n    );\n};\n\nexport default Index;","import React from 'react';\n\nconst Journey = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90vh'\n            }}\n        >\n            <h1>Journey</h1>\n        </div>\n    );\n};\n\nexport default Journey;","import React from 'react';\n\nconst Place = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90vh'\n            }}\n        >\n            <h1>Place</h1>\n        </div>\n    );\n};\n\nexport default Place;","import React from 'react';\n\nconst Program = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90vh'\n            }}\n        >\n            <h1>Program</h1>\n        </div>\n    );\n};\n\nexport default Program;","import React from 'react';\n\nconst Info = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                height: '90vh'\n            }}\n        >\n            <h1>Info</h1>\n        </div>\n    );\n};\n\nexport default Info;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/navigation/Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages';\nimport Journey from './pages/journey';\nimport Place from './pages/place';\nimport Program from './pages/program';\nimport Info from './pages/info';\n\nfunction App() {\n  return (\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path={process.env.BASE_URL + '/'} component={Home} />\n          <Route path={process.env.BASE_URL + '/journey'} component={Journey} />\n          <Route path={process.env.BASE_URL + '/place'} component={Place} />\n          <Route path={process.env.BASE_URL + '/program'} component={Program} />\n          <Route path={process.env.BASE_URL + '/info'} component={Info} />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { ThemeProvider } from \"styled-components\";\nimport {theme} from \"./theme\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme = { theme }>\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","// export const theme = {\n//     primaryDark: \"#bcaaa4\",\n//     primaryLight: \"#d7ccc8\",\n//     secondary: \"#e8f5e9\"\n// }\n\nexport const theme = {\n    primaryDark: \"#2e7d32\",\n    primaryLight: \"#60ad5e\",\n    secondary: \"#e8f5e9\"\n}"],"sourceRoot":""}